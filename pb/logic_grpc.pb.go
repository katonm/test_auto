// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParenthesesServiceClient is the client API for ParenthesesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParenthesesServiceClient interface {
	Fix(ctx context.Context, in *FixRequest, opts ...grpc.CallOption) (*FixResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type parenthesesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParenthesesServiceClient(cc grpc.ClientConnInterface) ParenthesesServiceClient {
	return &parenthesesServiceClient{cc}
}

func (c *parenthesesServiceClient) Fix(ctx context.Context, in *FixRequest, opts ...grpc.CallOption) (*FixResponse, error) {
	out := new(FixResponse)
	err := c.cc.Invoke(ctx, "/ParenthesesService/Fix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parenthesesServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/ParenthesesService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParenthesesServiceServer is the server API for ParenthesesService service.
// All implementations must embed UnimplementedParenthesesServiceServer
// for forward compatibility
type ParenthesesServiceServer interface {
	Fix(context.Context, *FixRequest) (*FixResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedParenthesesServiceServer()
}

// UnimplementedParenthesesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParenthesesServiceServer struct {
}

func (UnimplementedParenthesesServiceServer) Fix(context.Context, *FixRequest) (*FixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fix not implemented")
}
func (UnimplementedParenthesesServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedParenthesesServiceServer) mustEmbedUnimplementedParenthesesServiceServer() {}

// UnsafeParenthesesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParenthesesServiceServer will
// result in compilation errors.
type UnsafeParenthesesServiceServer interface {
	mustEmbedUnimplementedParenthesesServiceServer()
}

func RegisterParenthesesServiceServer(s grpc.ServiceRegistrar, srv ParenthesesServiceServer) {
	s.RegisterService(&ParenthesesService_ServiceDesc, srv)
}

func _ParenthesesService_Fix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParenthesesServiceServer).Fix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParenthesesService/Fix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParenthesesServiceServer).Fix(ctx, req.(*FixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParenthesesService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParenthesesServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParenthesesService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParenthesesServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParenthesesService_ServiceDesc is the grpc.ServiceDesc for ParenthesesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParenthesesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ParenthesesService",
	HandlerType: (*ParenthesesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fix",
			Handler:    _ParenthesesService_Fix_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ParenthesesService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/logic.proto",
}
